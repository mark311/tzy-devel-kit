#!/usr/bin/python
'''
config format:

---
[.basic]
server=zhiyang.tzy@1.1.1.1
path=/home/zhiyang.tzy/project1/
exclude=*.git:*.idea:*.iml:TAGS

# command executed before rsync push to remote
clean_cmd=make clean

# default target name
target=mytarget1

[mytarget1]
cmd=cd ../ && scons nuwa
---

'''
import os,sys
import subprocess
import collections
import itertools
import logging
import ConfigParser

CONFFILE_NAME = ".RsyncCompileRemotes"
BASIC_SECTION_NAME = ".basic"
RSYNC_EXCLUDE_LIST = ['*.git', "*.idea", "*.iml", "TAGS", CONFFILE_NAME]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("rsync-compile")

Conf = collections.namedtuple('Conf', ['rserver', 'rpath', 'lpath', 'excludes'])

def join_command_list(cmdlist):
    def quote(elem):
        if any(c in '*"\' ' for c in elem):
            return '"' + elem.replace('"', '\\"') + '"'
        else:
            return elem
    return " ".join([quote(e) for e in cmdlist])

def rsync_push(conf):
    exclude_params = []
    for x in conf.excludes:
        exclude_params += ['--exclude', x]

    rpath = conf.rpath
    if not rpath.endswith('/'):
        rpath += '/'

    lpath = conf.lpath
    if not lpath.endswith('/'):
        lpath += '/'

    rsync_command = ['rsync', '-cav', '--delete'] + exclude_params + [lpath, conf.rserver+":"+rpath]
    logger.info('execute rsync command: {}'.format(join_command_list(rsync_command)))

    rc = subprocess.call(rsync_command)
    if rc != 0:
        exit(rc)

def remote_compile(conf, command):
    ssh_cmd = ['ssh']

    # With ssh options '-t -t' given, the user spawned process will be
    # killed if we interrupt the ssh.
    # see: https://unix.stackexchange.com/questions/103699/kill-process-spawned-by-ssh-when-ssh-dies
    ssh_cmd += ['-t', '-t']

    ssh_cmd += [conf.rserver, "cd {}; {}".format(conf.rpath, command)]
    logger.info('execute compile command: {}'.format(join_command_list(ssh_cmd)))

    rc = subprocess.call(ssh_cmd)
    if rc != 0:
        exit(rc)

def main():
    # find working dir
    workdir = os.getcwd()
    while not os.path.exists(os.path.join(workdir, CONFFILE_NAME)):
        workdir = os.path.dirname(workdir.rstrip('/'))
        if workdir == '/':
            raise Exception("can't search {} in all upper level directories from".format(os.getcwd()))
    os.chdir(workdir)
    logger.info("workdir: {}".format(workdir))

    # read configuration file
    config = ConfigParser.ConfigParser()
    with open(CONFFILE_NAME, 'r') as fin:
        config.readfp(fin)
    if not config.has_section(BASIC_SECTION_NAME):
        raise Exception("can't find section %s in %s".format(BASIC_SECTION_NAME, CONFFILE_NAME))

    # parse 'excludes' list
    excludes = RSYNC_EXCLUDE_LIST
    if config.has_option(BASIC_SECTION_NAME, "exclude"):
        excludes = config.get(BASIC_SECTION_NAME, "exclude").split(":")
        excludes = RSYNC_EXCLUDE_LIST + excludes

    # determine 'target'
    target = None
    if len(sys.argv) >= 2:
        target = sys.argv[1]
    elif config.has_option(BASIC_SECTION_NAME, "target"):
        target = config.get(BASIC_SECTION_NAME, "target")

    if not config.has_option(target, 'cmd'):
        raise Exception('target %s does not contain "cmd" option' % target)
    command = config.get(target, 'cmd')

    conf = Conf(rserver=config.get(BASIC_SECTION_NAME, "server"),
                rpath=config.get(BASIC_SECTION_NAME, "path"),
                lpath="./",
                excludes=excludes)

    logger.info("remote: {} {}".format(conf.rserver, conf.rpath))

    # execute clean command
    if config.has_option(BASIC_SECTION_NAME, "clean_cmd"):
        clean_cmd = config.get(BASIC_SECTION_NAME, "clean_cmd")
        logger.info("clean local tree via command: '{}'".format(clean_cmd))
        subprocess.check_call(['/bin/sh', '-c', clean_cmd])

    rsync_push(conf)

    if command is not None:
        remote_compile(conf, command)

if __name__ == "__main__":
    exit(main())
