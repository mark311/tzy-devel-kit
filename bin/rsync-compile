#!/usr/bin/python
'''
config format:

---
[.basic]
server=zhiyang.tzy@1.1.1.1
path=/home/zhiyang.tzy/project1/
exclude=*.git:*.idea:*.iml:TAGS

# command executed before rsync push to remote
clean_cmd=make clean

# default target name
target=mytarget1

[mytarget1]
cmd=cd ../ && scons nuwa
---

'''
import os,sys
import subprocess
import collections
import itertools
import logging
import ConfigParser

RCR_HOME_DIR = os.path.expanduser("~/.RsyncCompileRemotes.d")
CONFFILE_NAME = ".RsyncCompileRemotes"
LAST_TARGET_FILE = ".last_target"
BASIC_SECTION_NAME = ".basic"
RSYNC_EXCLUDE_LIST = ['*.git', "*.idea", "*.iml", "TAGS", CONFFILE_NAME]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("rsync-compile")

Conf = collections.namedtuple('Conf', ['rserver', 'rpath', 'lpath', 'excludes'])

def join_command_list(cmdlist):
    def quote(elem):
        if any(c in '*"\' ' for c in elem):
            return '"' + elem.replace('"', '\\"') + '"'
        else:
            return elem
    return " ".join([quote(e) for e in cmdlist])

def rsync_push(conf):
    exclude_params = []
    for x in conf.excludes:
        exclude_params += ['--exclude', x]

    rpath = conf.rpath
    if not rpath.endswith('/'):
        rpath += '/'

    lpath = conf.lpath
    if not lpath.endswith('/'):
        lpath += '/'

    rsync_command = ['rsync', '-cav', '--delete'] + exclude_params + [lpath, conf.rserver+":"+rpath]
    logger.info('execute rsync command: {}'.format(join_command_list(rsync_command)))

    rc = subprocess.call(rsync_command)
    if rc != 0:
        exit(rc)

def remote_compile(conf, command):
    ssh_cmd = ['ssh']

    # With ssh options '-t -t' given, the user spawned process will be
    # killed if we interrupt the ssh.
    # see: https://unix.stackexchange.com/questions/103699/kill-process-spawned-by-ssh-when-ssh-dies
    ssh_cmd += ['-t', '-t']

    # with ssh option '-t', bash will not load ~/.bashrc, here we do it explicitly.
    prepare_script = "source ~/.bashrc;"

    # change current directory to user specified path on remote server
    prepare_script += "cd {};".format(conf.rpath)

    ssh_cmd += [conf.rserver, prepare_script + command]
    logger.info('execute compile command: {}'.format(join_command_list(ssh_cmd)))

    rc = subprocess.call(ssh_cmd)
    if rc != 0:
        exit(rc)

def is_rcr_root_dir(dirpath):
    return os.path.exists(os.path.join(dirpath, CONFFILE_NAME))

def is_git_root_dir(dirpath):
    return os.path.exists(os.path.join(dirpath, ".git"))

def is_project_root_dir(dirpath):
    return is_rcr_root_dir(dirpath) or is_git_root_dir(dirpath)

def load_last_target(confdir):
    filepath = os.path.join(confdir, LAST_TARGET_FILE)
    if not os.path.exists(filepath):
        return None
    with open(filepath, 'r') as f:
        return f.readline().strip()

def save_last_target(confdir, target):
    filepath = os.path.join(confdir, LAST_TARGET_FILE)
    with open(filepath, 'w') as f:
        print >>f, target


def main():
    # find working dir
    workdir = os.getcwd()
    while not is_project_root_dir(workdir):
        workdir = os.path.dirname(workdir.rstrip('/'))
        if workdir == '/':
            raise Exception("can't search {} in all upper level directories from".format(os.getcwd()))
    os.chdir(workdir)
    logger.info("workdir: {}".format(workdir))

    confdir = workdir
    if not is_rcr_root_dir(confdir):
        dirname = os.path.basename(confdir)
        # there exists the same name directory of current project directory in RCR_HOME_DIR
        confdir = os.path.join(RCR_HOME_DIR, dirname)
        if not is_rcr_root_dir(confdir):
            raise Exception('.RsyncCompileRemotes can not found in either {} or {}'.format(workdir, confdir))

    logger.info("found config file {}".format(os.path.join(confdir, CONFFILE_NAME)))

    # read configuration file
    config = ConfigParser.ConfigParser()
    with open(os.path.join(confdir, CONFFILE_NAME), 'r') as fin:
        config.readfp(fin)
    if not config.has_section(BASIC_SECTION_NAME):
        raise Exception("can't find section %s in %s".format(BASIC_SECTION_NAME, CONFFILE_NAME))

    # parse 'excludes' list
    excludes = RSYNC_EXCLUDE_LIST
    if config.has_option(BASIC_SECTION_NAME, "exclude"):
        excludes = config.get(BASIC_SECTION_NAME, "exclude").split(":")
        excludes = RSYNC_EXCLUDE_LIST + excludes

    # determine 'target'
    target = None
    last_target = load_last_target(confdir)
    if len(sys.argv) >= 2:
        target = sys.argv[1]
    elif last_target is not None:
        target = last_target
    elif config.has_option(BASIC_SECTION_NAME, "target"):
        target = config.get(BASIC_SECTION_NAME, "target")
    save_last_target(confdir, target)
    logger.info("target: {}".format(target))

    # --list for list all target
    if target == '--list':
        targets = set(config.sections()) - set([BASIC_SECTION_NAME])
        print "\ntargets:\n"
        print "".join(["   %s\n" % target for target in targets])
        return 0

    if not config.has_option(target, 'cmd'):
        raise Exception('target %s does not contain "cmd" option' % target)
    command = config.get(target, 'cmd')

    conf = Conf(rserver=config.get(BASIC_SECTION_NAME, "server"),
                rpath=config.get(BASIC_SECTION_NAME, "path"),
                lpath="./",
                excludes=excludes)

    logger.info("remote: {} {}".format(conf.rserver, conf.rpath))

    # execute clean command
    if config.has_option(BASIC_SECTION_NAME, "clean_cmd"):
        clean_cmd = config.get(BASIC_SECTION_NAME, "clean_cmd")
        logger.info("clean local tree via command: '{}'".format(clean_cmd))
        subprocess.check_call(['/bin/sh', '-c', clean_cmd])

    rsync_push(conf)

    if command is not None:
        remote_compile(conf, command)

    logger.info("finished at local directory: {}, for target {}".format(os.path.abspath(conf.lpath), repr(target)))


def main_v2():
    if len(sys.argv) < 6:
        print "usage: PROGRAM --v2 RSERVER RPATH LPATH EXCLUDES COMPILE_CMDS"
        return 1

    logger.info("ARGS: %s" % repr(sys.argv))

    # parse 'excludes' list
    excludes = RSYNC_EXCLUDE_LIST
    excludes = sys.argv[5].split(":")
    excludes = RSYNC_EXCLUDE_LIST + excludes

    server = sys.argv[2]
    rpath = sys.argv[3]
    lpath = os.path.expanduser(sys.argv[4])

    conf = Conf(server, rpath, lpath, excludes)
    command = sys.argv[6]

    rsync_push(conf)

    if command is not None:
        remote_compile(conf, command)

    logger.info("finished at local directory: {}, for command: {}".format(os.path.abspath(conf.lpath), repr(command)))


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--v2":
        exit(main_v2())
    else:
        exit(main())
